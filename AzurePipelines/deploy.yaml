trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  terraformWorkingDirectory: './Terraform'

stages:
- stage: 
  jobs:
  - job: 
    steps:
    - checkout: self
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(terraformWorkingDirectory)'
        backendServiceArm: 'Azure 1'
        backendAzureRmStorageAccountName: 'satfstateeast'
        backendAzureRmContainerName: 'tfstate-audiobooks'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(terraformWorkingDirectory)'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(terraformWorkingDirectory)'
        environmentServiceNameAzureRM: 'Azure 1'
        commandOptions: '-out=tfplan'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(terraformWorkingDirectory)'
        environmentServiceNameAzureRM: 'Azure 1'
        commandOptions: '-auto-approve tfplan'

    - script: |
        terraform output -raw webapp_name > webapp_name.txt
      displayName: 'Get Azure Web App Name'
      workingDirectory: $(terraformWorkingDirectory)

    - task: AzureCLI@2
      displayName: 'Azure Login'
      inputs:
        azureSubscription: 'Azure 1'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: echo "Logged in to Azure"

    - task: AzureWebAppContainer@1
      displayName: 'Deploy container to Azure Web App'
      inputs:
        azureSubscription: 'Azure 1'
        appName: $(cat $(terraformWorkingDirectory)/webapp_name.txt)
        containers: 'ghcr.io/advplyr/audiobookshelf:latest'